var searchIndex = JSON.parse('{\
"WahWah":{"doc":"","t":"FDDFMFMMLLLLFFHMLLLLLLLLLLMAMLLMLLLLLAMMMMLLMMLLMAMLLLLLLLMANNDENNMLLLLMMLLLLLLLLLLLLLMLMLMLLLLLLDLLMLLLMLLMLLLMLLLLDLLMLLLLLLLLLMLLLLLLLLLLLMLLLDLLMMLLLLLLMLLLMLLLLL","n":["GetPluginFactory","Wahwah","WahwahParams","apply_fir_filter_blockwise","attack_rate","bandpass_fir","base_high_filter","base_low_filter","borrow","borrow","borrow_mut","borrow_mut","bundleEntry","bundleExit","clap_entry","decay_rate","default","default","deref","deref","deref_mut","deref_mut","deserialize_fields","drop","drop","editor","editor_state","envelope","envelope","from","from","gain","init","init","initialize","into","into","lfo","lfo","lfo_freq","lfo_intensity","onset_threshold","param_map","params","params","previous_samples_list","process","reset","reset_threshold","ring_buffer","sample_rate","serialize_fields","try_from","try_from","try_into","try_into","type_id","type_id","use_onset_detection","vibrato","ATTACK","DECAY","Envelope","EnvelopeState","FINAL","WAITING","attack_rate","borrow","borrow","borrow_mut","borrow_mut","curr_value","decay_rate","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","new","onset_threshold","process_one_sample","reset_threshold","set_params","state","try_from","try_from","try_into","try_into","type_id","type_id","LFO","borrow","borrow_mut","buffer","deref","deref_mut","drop","freq","from","get_block","index","init","into","new","sample_rate","set_freq","try_from","try_into","type_id","RingBuffer","borrow","borrow_mut","buffer","capacity","deref","deref_mut","drop","from","get","get_frac","get_read_index","get_write_index","head","init","into","len","new","peek","pop","push","put","reset","set_read_index","set_write_index","tail","try_from","try_into","type_id","Vibrato","borrow","borrow_mut","buffer","delay","deref","deref_mut","drop","from","init","into","lfo","new","process_block","process_one_sample","sample_rate","set_delay","set_freq","try_from","try_into","type_id"],"q":[[0,"WahWah"],[60,"WahWah::envelope"],[97,"WahWah::lfo"],[116,"WahWah::ring_buffer"],[145,"WahWah::vibrato"],[166,"core::ffi"],[167,"alloc::vec"],[168,"alloc::string"],[169,"alloc::collections::btree::map"],[170,"nih_plug::context::gui"],[171,"nih_plug::editor"],[172,"alloc::boxed"],[173,"core::option"],[174,"nih_plug::audio_setup"],[175,"nih_plug::audio_setup"],[176,"nih_plug::params::internals"],[177,"nih_plug::params"],[178,"alloc::sync"],[179,"nih_plug::buffer"],[180,"nih_plug::audio_setup"],[181,"nih_plug::context::process"],[182,"core::result"],[183,"core::any"],[184,"core::marker"],[185,"core::default"]],"d":["The VST3 plugin factory entry point.","Main struct for the Wah Wah plugin","","Applies the FIR filter kernel generated by <code>bandpass_fir</code>","","Returns a convolution kernel for an FIR bandpass filter of …","","","","","","","","","The CLAP plugin’s entry point.","","","","","","","","","","","Handles the rendering of the egui based user-interface","","","","Returns the argument unchanged.","Returns the argument unchanged.","The parameter’s ID is used to identify the parameter in …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Callback function which is called once per block. All …","","","","","","","","","","","","","","","","","Keeps track of the envelope stages.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Update each of the evenlope parameters, can be called per …","","","","","","","","LFO is a low frequency oscillator","","","","","","","","Returns the argument unchanged.","Places a block of generated LFO samples into <code>output</code>","","","Calls <code>U::from(self)</code>.","Creates a new LFO of specified frequency and sample rate","","Changes the frequency of the LFO. This will modify the …","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,9,0,9,9,8,9,8,9,0,0,0,9,8,9,8,9,8,9,9,8,9,8,9,0,8,8,9,9,8,9,8,8,9,0,8,9,9,9,9,8,8,8,8,8,9,0,8,9,8,9,8,9,8,9,9,0,36,36,0,0,36,36,29,36,29,36,29,29,29,36,29,36,29,36,29,36,29,36,29,36,29,29,29,29,29,29,29,36,29,36,29,36,29,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35],"f":[[[],1],0,0,[[[3,[2]],[5,[4]],[5,[2]]],[[5,[2]]]],0,[[6,4,4,4],[[5,[4]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,7],[[],7],0,0,[[],8],[[],9],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[[9,[11,[10,10]]],12],[6,12],[6,12],[[8,[13,[8]]],[[16,[[15,[14]]]]]],0,0,0,[-1,-1,[]],[-1,-1,[]],0,[[],6],[[],6],[[8,17,18,-1],7,[[19,[8]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[9,[[5,[[12,[10,20,10]]]]]],[8,[[22,[21]]]],0,0,[[8,23,24,-1],25,[[26,[8]]]],[8,12],0,0,0,[9,[[11,[10,10]]]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,28,[]],[-1,28,[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,12],[6,12],[-1,-1,[]],[-1,-1,[]],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[[2,2,2,2],29],0,[[29,2],2],0,[[29,2,2,2,2],12],0,[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,28,[]],[-1,28,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[6,-1,[]],[6,-1,[]],[6,12],0,[-1,-1,[]],[[30,[3,[2]]],12],0,[[],6],[-1,-2,[],[]],[[2,6],30],0,[[30,2],12],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,28,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[[31,[-1]]],6,[32,33]],[6,-1,[]],[6,-1,[]],[6,12],[-1,-1,[]],[[[31,[-1]],34],-1,[32,33]],[[[31,[2]],2],2],[[[31,[-1]]],6,[32,33]],[[[31,[-1]]],6,[32,33]],0,[[],6],[-1,-2,[],[]],[[[31,[-1]]],6,[32,33]],[6,[[31,[-1]]],[32,33]],[[[31,[-1]]],-1,[32,33]],[[[31,[-1]]],-1,[32,33]],[[[31,[-1]],-1],12,[32,33]],[[[31,[-1]],-1],12,[32,33]],[[[31,[-1]]],12,[32,33]],[[[31,[-1]],34],12,[32,33]],[[[31,[-1]],34],12,[32,33]],0,[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,28,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[6,-1,[]],[6,-1,[]],[6,12],[-1,-1,[]],[[],6],[-1,-2,[],[]],0,[[2,2,6],35],[[35,[3,[2]],[3,[2]]],12],[[35,2],12],0,[[35,2],12],[[35,2],12],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,28,[]]],"c":[],"p":[[4,"c_void",166],[15,"f32"],[15,"slice"],[15,"f64"],[3,"Vec",167],[15,"usize"],[15,"bool"],[3,"Wahwah",0],[3,"WahwahParams",0],[3,"String",168],[3,"BTreeMap",169],[15,"tuple"],[3,"AsyncExecutor",170],[8,"Editor",171],[3,"Box",172],[4,"Option",173],[3,"AudioIOLayout",174],[3,"BufferConfig",174],[8,"InitContext",175],[4,"ParamPtr",176],[8,"Params",177],[3,"Arc",178],[3,"Buffer",179],[3,"AuxiliaryBuffers",174],[4,"ProcessStatus",180],[8,"ProcessContext",181],[4,"Result",182],[3,"TypeId",183],[3,"Envelope",60],[3,"LFO",97],[3,"RingBuffer",116],[8,"Copy",184],[8,"Default",185],[15,"i32"],[3,"Vibrato",145],[4,"EnvelopeState",60]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
